{"version":3,"sources":["components/Navbar.js","components/Home.js","components/ServerCard.js","components/Hosts.js","components/Services.js","components/Analytics.js","components/About.js","components/ServerDetails.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","name","setState","activeItem","this","Menu","pointing","secondary","size","Item","src","header","position","as","NavLink","to","color","active","Icon","Component","Home","ServerCard","props","pathname","host_data","services_data","Card","Content","Header","hostname","Description","plugin_output","extra","Label","circular","floating","Hosts","hosts","services","loading","failed","error","getData","bind","axios","get","then","response","data","catch","setInterval","Object","keys","map","key","current_state","host_name","d1","Grid","Column","value","padded","columns","Message","negative","icon","Services","Analytics","About","ServerDetails","location","Table","Row","Cell","width","celled","striped","HeaderCell","colSpan","Body","App","className","exact","path","component","Boolean","window","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.191fcf3e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { Menu,Icon } from 'semantic-ui-react';\r\n\r\nclass Navbar extends Component {\r\n  state = {}\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <Menu pointing secondary size='massive'>\r\n\r\n        <Menu.Item >\r\n          <img src='https://www.bemlindia.in/images/logo_beml1.png'/>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item header\r\n        name='Bharat Earth Movers Limited'\r\n        />\r\n\r\n        <Menu.Menu position='left'>\r\n            <Menu.Item as={NavLink} to='Hosts' color='red'\r\n            name='Hosts'\r\n            active={activeItem === 'Hosts'}\r\n            >\r\n              <Icon name='server'/>Hosts\r\n            </Menu.Item>\r\n            <Menu.Item as={NavLink} to='Services' color='green'\r\n            name='Services'\r\n            active={activeItem === 'Services'}\r\n            />\r\n            <Menu.Item as={NavLink} to='Analytics' color='blue'\r\n            name='Analytics'\r\n            active={activeItem === 'Analytics'}\r\n            />\r\n        </Menu.Menu>\r\n\r\n        <Menu.Menu position='right'>\r\n\r\n            <Menu.Item as={NavLink} to='About' color='blue'\r\n            name='About'\r\n            active={activeItem === 'About'}\r\n            />\r\n            \r\n        </Menu.Menu>\r\n\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\nexport default Navbar;","import React, { Component } from 'react';\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>This is Home Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Home;","import React from 'react';\r\nimport {Card,Label } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst ServerCard = props => {\r\n    return(\r\n        <Link to={{\r\n            pathname: '/ServerDetails',\r\n            state: {\r\n              host_data: props.host_data,\r\n              services_data: props.services_data\r\n            }\r\n          }}>\r\n        <Card color={props.color}>\r\n            <Card.Content>\r\n              <Card.Header>{props.hostname}</Card.Header>\r\n              <Card.Description>\r\n                {props.plugin_output}\r\n              </Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <Label color={props.color} circular floating>\r\n                    {props.state}\r\n                </Label>\r\n            </Card.Content>\r\n        </Card>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default ServerCard;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Message,Grid,Icon } from 'semantic-ui-react';\r\nimport ServerCard from './ServerCard';\r\n\r\n//const API_URL = 'http://18.219.235.189/status.php';\r\nconst API_URL = 'https://rohit1727.github.io/server_log/status.json';\r\n\r\nclass Hosts extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n        hosts:{},\r\n        services:{},\r\n        loading: true,\r\n        failed: false,\r\n        error:null,\r\n      }\r\n      this.getData = this.getData.bind(this);\r\n    }\r\n\r\n    getData() {\r\n      axios\r\n        .get(`${API_URL}`)\r\n        .then(response => this.setState({\r\n              hosts: response.data.hosts, \r\n              services: response.data.services,\r\n              loading:false,\r\n              failed: false}))\r\n        .catch(error => this.setState({ error, loading: false, failed: true}));\r\n    }\r\n\r\ncomponentDidMount() {\r\n  this.getData()\r\n  setInterval(this.getData, 2000)\r\n}\r\n\r\n  render(){\r\n    const data = Object.keys(this.state.hosts).map((key) => (\r\n        \r\n      this.state.hosts[key].current_state == 1 ?(\r\n        <ServerCard \r\n          color='green'\r\n          host_data={this.state.hosts[key]}\r\n          services_data={this.state.services[key]}\r\n          hostname={this.state.hosts[key].host_name}\r\n          plugin_output={this.state.hosts[key].plugin_output}\r\n          state='UP'\r\n          />\r\n          \r\n        \r\n      ):\r\n      (\r\n        <ServerCard \r\n          color='red'\r\n          host_data={this.state.hosts[key]}\r\n          services_data={this.state.services[key]}\r\n          hostname={this.state.hosts[key].host_name}\r\n          plugin_output={this.state.hosts[key].plugin_output}\r\n          state='DOWN'\r\n          />\r\n      )\r\n  ));\r\n\r\n  var d1 = Object.keys(data).map(function(key) {\r\n    return <Grid.Column value={key}>{data[key]}</Grid.Column>\r\n  });\r\n    \r\n  if(this.state.failed)\r\n  {\r\n    return(\r\n      <Grid padded columns='equal'>\r\n        <Grid.Column></Grid.Column>\r\n        <Grid.Column>\r\n          <Message negative>\r\n            <Message.Header><Icon name='warning'/> Sorry unable to fetch data</Message.Header>\r\n          </Message>\r\n        </Grid.Column>\r\n        <Grid.Column></Grid.Column>\r\n      </Grid>\r\n      \r\n    );\r\n  }\r\n  else{\r\n    return(\r\n      \r\n      this.state.loading?(\r\n        <Message icon>\r\n          <Icon name='circle notched' loading />\r\n          <Message.Content>\r\n            <Message.Header>Just one second</Message.Header>\r\n            We are fetching that content for you.\r\n          </Message.Content>\r\n        </Message>\r\n      ):(\r\n           <Grid padded columns={3}>\r\n                {d1}\r\n            </Grid>\r\n      )\r\n      \r\n      );\r\n  }\r\n    }\r\n  }  \r\n  export default Hosts;","import React, { Component } from 'react';\r\nclass Services extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Services Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Services;","import React, { Component } from 'react';\r\nclass Analytics extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Analytics Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Analytics;","import React, { Component } from 'react';\r\nclass About extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>About Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default About;","import React, { Component } from 'react';\r\nimport {Grid,Table} from 'semantic-ui-react';\r\n\r\nclass ServerDetails extends Component{\r\n    \r\n\r\n    render(){       \r\n        const services =this.props.location.state.services_data;\r\n        const data = Object.keys(services).map((key) => (\r\n            \r\n            <Table.Row>\r\n                            <Table.Cell>{key}</Table.Cell>\r\n                            <Table.Cell>{services[key].plugin_output}</Table.Cell>\r\n                        </Table.Row>\r\n            ));\r\n\r\n        return(\r\n            <Grid padded columns='equal'>\r\n                <Grid.Column></Grid.Column>\r\n                <Grid.Column width={8}>\r\n                <Table celled striped>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell colSpan='3'>\r\n                                {this.props.location.state.host_data.host_name} Services\r\n                            </Table.HeaderCell>\r\n                        </Table.Row>\r\n                        {data}\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        \r\n                    </Table.Body>\r\n                </Table>\r\n                </Grid.Column>\r\n                <Grid.Column></Grid.Column>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nexport default ServerDetails;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport {HashRouter,Route,Switch} from 'react-router-dom';\nimport Home from './components/Home';\nimport Hosts from './components/Hosts';\nimport Services from './components/Services';\nimport Analytics from './components/Analytics';\nimport About from './components/About';\nimport ServerDetails from './components/ServerDetails';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n      <div className=\"App\">\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/hosts\" component={Hosts}/>\n          <Route path=\"/services\" component={Services}/>\n          <Route path=\"/analytics\" component={Analytics}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/serverdetails\" component={ServerDetails}/>\n        </Switch>\n      </div>\n      </HashRouter>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}