{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Hosts.js","components/Services.js","components/Analytics.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","name","setState","activeItem","this","Menu","pointing","secondary","size","Item","src","header","position","as","NavLink","to","color","active","Component","Home","Hosts","hosts","isUp","error","getData","bind","axios","get","then","response","data","catch","done","setInterval","Object","keys","map","key","current_state","Card","href","Content","Header","host_name","Description","plugin_output","extra","Label","floating","d1","Grid","Column","value","padded","columns","Services","Analytics","About","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"oRAmDeA,E,2MA9CbC,MAAQ,G,EAERC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKC,SAAS,CAAEC,WAAYF,K,wEAErD,IACAE,EAAeC,KAAKN,MAApBK,WAER,OACE,kBAACE,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,EAACC,KAAK,WAE5B,kBAACH,EAAA,EAAKI,KAAN,KACE,yBAAKC,IAAI,oDAGX,kBAACL,EAAA,EAAKI,KAAN,CAAWE,QAAM,EACjBV,KAAK,gCAGL,kBAACI,EAAA,EAAKA,KAAN,CAAWO,SAAS,QAChB,kBAACP,EAAA,EAAKI,KAAN,CAAWI,GAAIC,IAASC,GAAG,QAAQC,MAAM,MACzCf,KAAK,QACLgB,OAAuB,UAAfd,IAER,kBAACE,EAAA,EAAKI,KAAN,CAAWI,GAAIC,IAASC,GAAG,WAAWC,MAAM,QAC5Cf,KAAK,WACLgB,OAAuB,aAAfd,IAER,kBAACE,EAAA,EAAKI,KAAN,CAAWI,GAAIC,IAASC,GAAG,YAAYC,MAAM,OAC7Cf,KAAK,YACLgB,OAAuB,cAAfd,KAIZ,kBAACE,EAAA,EAAKA,KAAN,CAAWO,SAAS,SAEhB,kBAACP,EAAA,EAAKI,KAAN,CAAWI,GAAIC,IAASC,GAAG,QAAQC,MAAM,OACzCf,KAAK,QACLgB,OAAuB,UAAfd,U,GAtCCe,a,QCMNC,E,iLAPP,OACI,6BACI,8C,GAJGD,a,qDC+EFE,E,YAxEf,aAAc,IAAD,8BACX,+CACKtB,MAAM,CACPuB,MAAM,GACNC,KAAM,EACNC,MAAM,MAER,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAPN,E,uEAUA,IAAD,OACRC,IACGC,IADH,UAdU,uDAgBPC,MAAK,SAAAC,GAAQ,OAAI,EAAK3B,SAAS,CAACmB,MAAOQ,EAASC,KAAKT,WACrDU,OAAM,SAAAR,GAAK,OAAI,EAAKrB,SAAS,CAAEqB,QAAOS,MAAM,S,0CAInD5B,KAAKoB,UACLS,YAAY7B,KAAKoB,QAAS,O,+BAGjB,IAAD,OACAM,EAAOI,OAAOC,KAAK/B,KAAKN,MAAMuB,OAAOe,KAAI,SAACC,GAAD,OAEN,GAAvC,EAAKvC,MAAMuB,MAAMgB,GAAKC,cAEpB,kBAACC,EAAA,EAAD,CAAMvB,MAAM,QAAQwB,KAAK,eACrB,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KAAc,EAAK5C,MAAMuB,MAAMgB,GAAKM,WACpC,kBAACJ,EAAA,EAAKK,YAAN,KACG,EAAK9C,MAAMuB,MAAMgB,GAAKQ,gBAGzB,kBAACN,EAAA,EAAKE,QAAN,CAAcK,OAAK,GACjB,kBAACC,EAAA,EAAD,CAAO/B,MAAM,QAAQgC,UAAQ,GAA7B,QAQR,kBAACT,EAAA,EAAD,CAAMvB,MAAM,MAAMwB,KAAK,gBACnB,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KAAc,EAAK5C,MAAMuB,MAAMgB,GAAKM,WACpC,kBAACJ,EAAA,EAAKK,YAAN,KACG,EAAK9C,MAAMuB,MAAMgB,GAAKQ,gBAGzB,kBAACN,EAAA,EAAKE,QAAN,CAAcK,OAAK,GACjB,kBAACC,EAAA,EAAD,CAAO/B,MAAM,MAAMgC,UAAQ,GAA3B,aAQVC,EAAKf,OAAOC,KAAKL,GAAMM,KAAI,SAASC,GACtC,OAAO,kBAACa,EAAA,EAAKC,OAAN,CAAaC,MAAOf,GAAMP,EAAKO,OAGtC,OAEO,kBAACa,EAAA,EAAD,CAAMG,QAAM,EAACC,QAAS,GAChBL,O,GAnEG/B,aCGLqC,E,iLAPP,OACI,6BACI,kD,GAJOrC,aCSRsC,E,iLAPP,OACI,6BACI,mD,GAJQtC,aCSTuC,E,iLAPP,OACI,6BACI,+C,GAJIvC,aC0BLwC,E,iLAhBX,OACE,kBAAC,IAAD,KACA,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,SAASC,UAAW1C,IAChC,kBAAC,IAAD,CAAOyC,KAAK,YAAYC,UAAWP,IACnC,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWN,IACpC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWL,W,GAXxBvC,aCGE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fb77ae88.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nclass Navbar extends Component {\r\n  state = {}\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { activeItem } = this.state\r\n\r\n    return (\r\n      <Menu pointing secondary size='massive'>\r\n\r\n        <Menu.Item >\r\n          <img src='https://www.bemlindia.in/images/logo_beml1.png'/>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item header\r\n        name='Bharat Earth Movers Limited'\r\n        />\r\n\r\n        <Menu.Menu position='left'>\r\n            <Menu.Item as={NavLink} to='Hosts' color='red'\r\n            name='Hosts'\r\n            active={activeItem === 'Hosts'}\r\n            />\r\n            <Menu.Item as={NavLink} to='Services' color='green'\r\n            name='Services'\r\n            active={activeItem === 'Services'}\r\n            />\r\n            <Menu.Item as={NavLink} to='Analytics' color='blue'\r\n            name='Analytics'\r\n            active={activeItem === 'Analytics'}\r\n            />\r\n        </Menu.Menu>\r\n\r\n        <Menu.Menu position='right'>\r\n\r\n            <Menu.Item as={NavLink} to='About' color='blue'\r\n            name='About'\r\n            active={activeItem === 'About'}\r\n            />\r\n            \r\n        </Menu.Menu>\r\n\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\nexport default Navbar;","import React, { Component } from 'react';\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Home Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Card,Grid,Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n//const API_URL = 'http://18.219.235.189/status.php';\r\nconst API_URL = 'https://rohit1727.github.io/server_log/status.json';\r\n\r\nclass Hosts extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n        hosts:{},\r\n        isUp: 0,\r\n        error:null,\r\n      }\r\n      this.getData = this.getData.bind(this);\r\n    }\r\n\r\n    getData() {\r\n      axios\r\n        .get(`${API_URL}`)\r\n        .then(response => this.setState({hosts: response.data.hosts}))\r\n        .catch(error => this.setState({ error, done: false }));\r\n    }\r\n\r\ncomponentDidMount() {\r\n  this.getData()\r\n  setInterval(this.getData, 2000)\r\n}\r\n\r\n  render(){\r\n    const data = Object.keys(this.state.hosts).map((key) => (\r\n        \r\n      this.state.hosts[key].current_state == 1 ?(\r\n        \r\n        <Card color='green' href='/#/Services'>\r\n            <Card.Content>\r\n              <Card.Header>{this.state.hosts[key].host_name}</Card.Header>\r\n              <Card.Description>\r\n                {this.state.hosts[key].plugin_output}\r\n              </Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <Label color='green' floating>\r\n                  UP\r\n                </Label>\r\n            </Card.Content>\r\n        </Card>\r\n        \r\n      ):\r\n      (\r\n        <Card color='red' href='/#/Analytics'>\r\n            <Card.Content>\r\n              <Card.Header>{this.state.hosts[key].host_name}</Card.Header>\r\n              <Card.Description>\r\n                {this.state.hosts[key].plugin_output}\r\n              </Card.Description>\r\n              </Card.Content>\r\n              <Card.Content extra>\r\n                <Label color='red' floating>\r\n                  DOWN\r\n                </Label>\r\n            </Card.Content>\r\n        </Card>\r\n      )\r\n  ));\r\n\r\n  var d1 = Object.keys(data).map(function(key) {\r\n    return <Grid.Column value={key}>{data[key]}</Grid.Column>\r\n  });\r\n    \r\n    return(\r\n      \r\n           <Grid padded columns={4}>\r\n                {d1}\r\n            </Grid>\r\n      \r\n      );\r\n    }\r\n  }  \r\n  export default Hosts;","import React, { Component } from 'react';\r\nclass Services extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Services Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Services;","import React, { Component } from 'react';\r\nclass Analytics extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Analytics Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Analytics;","import React, { Component } from 'react';\r\nclass About extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>About Page</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default About;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport {HashRouter,Route,Switch} from 'react-router-dom';\nimport Home from './components/Home';\nimport Hosts from './components/Hosts';\nimport Services from './components/Services';\nimport Analytics from './components/Analytics';\nimport About from './components/About';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n      <div className=\"App\">\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/hosts\" component={Hosts}/>\n          <Route path=\"/services\" component={Services}/>\n          <Route path=\"/analytics\" component={Analytics}/>\n          <Route path=\"/about\" component={About}/>\n        </Switch>\n      </div>\n      </HashRouter>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}